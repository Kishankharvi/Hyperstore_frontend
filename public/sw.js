// A new version number for your cache
const CACHE_NAME = 'nexus-store-cache-v3';
const API_CACHE_NAME = 'nexus-store-api-cache-v3';

// The full URL to your backend API
const API_BASE_URL = 'https://nexus-store-d2d4c8bb6f52.herokuapp.com/api';

// IMPORTANT: These filenames are generated by Vite and will change every time you build your app.
// You must update these two lines manually after each `npm run build` by checking the `dist/index.html` file.
const APP_SHELL_FILES = [
  '/',
  '/index.html',
  '/manifest.json',
  '/vite.svg',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
  // Manually add your generated assets from the dist/assets folder
  '/assets/index-5B6EeYiM.js',
  '/assets/index-DWTKROBS.css'
];

// Install the service worker and cache the app shell
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Service Worker: Caching app shell');
      return cache.addAll(APP_SHELL_FILES);
    }).catch(error => {
      console.error('Failed to cache app shell:', error);
    })
  );
});

// Clean up old caches on activation
self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME, API_CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Service Worker: Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  return self.clients.claim();
});

// Intercept fetch requests to serve from cache or network
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Strategy for API calls (Cache-First)
  // This is for requests to your Heroku backend.
  if (url.origin === new URL(API_BASE_URL).origin && request.method === 'GET') {
    event.respondWith(
      caches.open(API_CACHE_NAME).then(async (cache) => {
        const cachedResponse = await cache.match(request);
        if (cachedResponse) {
          return cachedResponse;
        }
        try {
          const networkResponse = await fetch(request);
          if (networkResponse.ok) {
            cache.put(request, networkResponse.clone());
          }
          return networkResponse;
        } catch (error) {
          console.error('API fetch failed:', error);
          // Optional: return a fallback JSON response for offline mode
          return new Response(JSON.stringify({ error: 'Offline and not in cache' }), {
            headers: { 'Content-Type': 'application/json' }
          });
        }
      })
    );
    return;
  }

  // Strategy for all other requests (e.g., app shell, assets, fonts)
  // Use a cache-first approach to make the app work offline.
  if (request.method === 'GET') {
    event.respondWith(
      caches.match(request).then((cachedResponse) => {
        return cachedResponse || fetch(request).then((networkResponse) => {
          // Clone the response because it can only be consumed once.
          const responseToCache = networkResponse.clone();
          caches.open(CACHE_NAME).then((cache) => {
            cache.put(request, responseToCache);
          });
          return networkResponse;
        });
      })
    );
  }
});